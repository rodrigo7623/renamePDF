/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cavapy.desa.vista;


import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javafx.scene.control.ProgressBar;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 *
 * @author RodrigoRamirez
 */
public class NewJFrame extends javax.swing.JFrame {
    
    File fileCda;
    Preferences prefsCda;
    
    File fileAcc;
    Preferences prefsAcc;

    
    JProgressBar jProgressBar = new JProgressBar(1, 100);
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        pack();
        setLocationRelativeTo(null);
        //jTextFieldPrefijoDelPDF.setVisible(false);
        //jLabelPrefijoDelPDF.setVisible(false);
        setIconImage(new ImageIcon(getClass().getResource("/icono/LOGO.png")).getImage());
        ImageIcon imageIcon = new javax.swing.ImageIcon(getClass().getResource("/icono/cavapy.jpg"));
        Image imagen = imageIcon.getImage();
        ImageIcon iconoEscalado = new ImageIcon(imagen.getScaledInstance(300, 80, Image.SCALE_SMOOTH));
        jLabelLogoCavapyCda.setIcon(iconoEscalado);
        jLabelLogoCavapyAcc.setIcon(iconoEscalado);
        prefsCda = Preferences.userNodeForPackage(NewJFrame.class);
        prefsAcc = Preferences.userNodeForPackage(NewJFrame.class);
        jTextFieldCarpetaContenedoraCda.setText(prefsCda.get("carpetaContenedora", ""));
        jTextFieldCarpetaContenedoraAcc.setText(prefsAcc.get("carpetaContenedora", ""));
        if (!jTextFieldCarpetaContenedoraCda.getText().equals("")) {
            fileCda = new File(jTextFieldCarpetaContenedoraCda.getText());
        }
        if (!jTextFieldCarpetaContenedoraAcc.getText().equals("")) {
            fileAcc = new File(jTextFieldCarpetaContenedoraAcc.getText());
        }
        jTextFieldPrefijoDelPDFCda.setText(prefsCda.get("prefijoDelPDF", ""));
        jTextFieldPrefijoDelPDFAcc.setText(prefsAcc.get("prefijoDelPDF", ""));
        jTextFieldNuevoNombrePDF.setText(jTextFieldNuevoNombrePDF.getText().toUpperCase());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonProcesarCda = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jLabelPrefijoDelPDF = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldPrefijoDelPDFCda = new javax.swing.JTextField();
        jTextFieldNuevoNombrePDF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabelLogoCavapyCda = new javax.swing.JLabel();
        jTextFieldPDFInicialCda = new javax.swing.JTextField();
        jSpinnerInicioNum = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinnerCantidad = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldCarpetaContenedoraCda = new javax.swing.JTextField();
        jButtonExaminar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonProcesarAcc = new javax.swing.JButton();
        jButtonSalir1 = new javax.swing.JButton();
        jLabelPrefijoDelPDF1 = new javax.swing.JLabel();
        jTextFieldPrefijoDelPDFAcc = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabelLogoCavapyAcc = new javax.swing.JLabel();
        jTextFieldPDFInicialAcc = new javax.swing.JTextField();
        jSpinnerInicioNumAcc = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldCarpetaContenedoraAcc = new javax.swing.JTextField();
        jButtonExaminar1 = new javax.swing.JButton();
        jSpinnerFinNumAcc = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N

        jButtonProcesarCda.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButtonProcesarCda.setText("Procesar");
        jButtonProcesarCda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcesarCdaActionPerformed(evt);
            }
        });

        jButtonSalir.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jLabelPrefijoDelPDF.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabelPrefijoDelPDF.setText("Prefijo del PDF");

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel5.setText("Nuevo nombre PDF");

        jTextFieldPrefijoDelPDFCda.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        jTextFieldPrefijoDelPDFCda.setToolTipText("Nombre del archivo PDF");
        jTextFieldPrefijoDelPDFCda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldPrefijoDelPDFCdaMouseClicked(evt);
            }
        });
        jTextFieldPrefijoDelPDFCda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPrefijoDelPDFCdaActionPerformed(evt);
            }
        });
        jTextFieldPrefijoDelPDFCda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPrefijoDelPDFCdaKeyPressed(evt);
            }
        });

        jTextFieldNuevoNombrePDF.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        jTextFieldNuevoNombrePDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNuevoNombrePDFActionPerformed(evt);
            }
        });
        jTextFieldNuevoNombrePDF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNuevoNombrePDFKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel1.setText("PDF inicial");

        jTextFieldPDFInicialCda.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        jTextFieldPDFInicialCda.setToolTipText("Nombre final del PDF");
        jTextFieldPDFInicialCda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldPDFInicialCdaMouseClicked(evt);
            }
        });
        jTextFieldPDFInicialCda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPDFInicialCdaActionPerformed(evt);
            }
        });
        jTextFieldPDFInicialCda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPDFInicialCdaKeyPressed(evt);
            }
        });

        jSpinnerInicioNum.setModel(new SpinnerNumberModel(1, 0, 999999999, 1));
        jSpinnerInicioNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jSpinnerInicioNumKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel2.setText("Inicio numeraci√≥n");

        jSpinnerCantidad.setModel(new SpinnerNumberModel(0, 0, 999999999, 1));

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel3.setText("Cantidad");

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel4.setText("Carpera contenedora");

        jTextFieldCarpetaContenedoraCda.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jTextFieldCarpetaContenedoraCda.setEnabled(false);

        jButtonExaminar.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButtonExaminar.setText("Examinar");
        jButtonExaminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExaminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(680, 680, 680))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jTextFieldCarpetaContenedoraCda, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonExaminar))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jSpinnerInicioNum, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinnerCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 390, Short.MAX_VALUE)
                                        .addComponent(jLabelLogoCavapyCda, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldPDFInicialCda, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldNuevoNombrePDF, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldPrefijoDelPDFCda, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(197, 197, 197)
                                .addComponent(jButtonProcesarCda, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(196, 196, 196)
                                .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(181, 181, 181))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelPrefijoDelPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPrefijoDelPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPrefijoDelPDFCda, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPDFInicialCda, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNuevoNombrePDF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerInicioNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCarpetaContenedoraCda, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonExaminar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabelLogoCavapyCda, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonProcesarCda, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53))
        );

        jTabbedPane1.addTab("CDA's", jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButtonProcesarAcc.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButtonProcesarAcc.setText("Procesar");
        jButtonProcesarAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcesarAccActionPerformed(evt);
            }
        });

        jButtonSalir1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButtonSalir1.setText("Salir");
        jButtonSalir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalir1ActionPerformed(evt);
            }
        });

        jLabelPrefijoDelPDF1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabelPrefijoDelPDF1.setText("Prefijo del PDF");

        jTextFieldPrefijoDelPDFAcc.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        jTextFieldPrefijoDelPDFAcc.setToolTipText("Nombre del archivo PDF");
        jTextFieldPrefijoDelPDFAcc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldPrefijoDelPDFAccMouseClicked(evt);
            }
        });
        jTextFieldPrefijoDelPDFAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPrefijoDelPDFAccActionPerformed(evt);
            }
        });
        jTextFieldPrefijoDelPDFAcc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPrefijoDelPDFAccKeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel7.setText("PDF inicial");

        jTextFieldPDFInicialAcc.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        jTextFieldPDFInicialAcc.setToolTipText("Nombre final del PDF");
        jTextFieldPDFInicialAcc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldPDFInicialAccMouseClicked(evt);
            }
        });
        jTextFieldPDFInicialAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPDFInicialAccActionPerformed(evt);
            }
        });
        jTextFieldPDFInicialAcc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPDFInicialAccKeyPressed(evt);
            }
        });

        jSpinnerInicioNumAcc.setModel(new SpinnerNumberModel(1, 0, 999999999, 1));
        jSpinnerInicioNumAcc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jSpinnerInicioNumAccKeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel8.setText("Inicio numeraci√≥n");

        jLabel10.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel10.setText("Carpera contenedora");

        jTextFieldCarpetaContenedoraAcc.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jTextFieldCarpetaContenedoraAcc.setEnabled(false);

        jButtonExaminar1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButtonExaminar1.setText("Examinar");
        jButtonExaminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExaminar1ActionPerformed(evt);
            }
        });

        jSpinnerFinNumAcc.setModel(new SpinnerNumberModel(1, 0, 999999999, 1));
        jSpinnerFinNumAcc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jSpinnerFinNumAccKeyPressed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel11.setText("Fin numeraci√≥n");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jTextFieldCarpetaContenedoraAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonExaminar1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextFieldPrefijoDelPDFAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldPDFInicialAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jButtonProcesarAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(176, 176, 176)
                                        .addComponent(jButtonSalir1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(58, 619, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerFinNumAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerInicioNumAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelLogoCavapyAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(219, 219, 219))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPrefijoDelPDF1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabelPrefijoDelPDF1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextFieldPrefijoDelPDFAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPDFInicialAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerInicioNumAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerFinNumAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabelLogoCavapyAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCarpetaContenedoraAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExaminar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonProcesarAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSalir1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
        );

        jTabbedPane1.addTab("ACCIONES", jPanel2);

        getContentPane().add(jTabbedPane1, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExaminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExaminarActionPerformed
        // TODO add your handling code here:
        JFileChooser select = new JFileChooser();
        select.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        select.setCurrentDirectory(new File(prefsCda.get("carpetaContenedora", ".")));
        int response = select.showOpenDialog(this);
        if (response == JFileChooser.APPROVE_OPTION) {
            fileCda = select.getSelectedFile();
            jTextFieldCarpetaContenedoraCda.setText(fileCda.getAbsolutePath());
            prefsCda.put("carpetaContenedora", fileCda.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonExaminarActionPerformed

    private void jSpinnerInicioNumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSpinnerInicioNumKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            jSpinnerCantidad.requestFocusInWindow();
        }
    }//GEN-LAST:event_jSpinnerInicioNumKeyPressed

    private void jTextFieldPDFInicialCdaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPDFInicialCdaKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            jTextFieldNuevoNombrePDF.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextFieldPDFInicialCdaKeyPressed

    private void jTextFieldPDFInicialCdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPDFInicialCdaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPDFInicialCdaActionPerformed

    private void jTextFieldPDFInicialCdaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldPDFInicialCdaMouseClicked
        // TODO add your handling code here:
        jTextFieldPDFInicialCda.enable();
    }//GEN-LAST:event_jTextFieldPDFInicialCdaMouseClicked

    private void jTextFieldNuevoNombrePDFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNuevoNombrePDFKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            jSpinnerInicioNum.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextFieldNuevoNombrePDFKeyPressed

    private void jTextFieldNuevoNombrePDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNuevoNombrePDFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNuevoNombrePDFActionPerformed

    private void jTextFieldPrefijoDelPDFCdaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPrefijoDelPDFCdaKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            jTextFieldPDFInicialCda.requestFocusInWindow();
        }
    }//GEN-LAST:event_jTextFieldPrefijoDelPDFCdaKeyPressed

    private void jTextFieldPrefijoDelPDFCdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPrefijoDelPDFCdaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPrefijoDelPDFCdaActionPerformed

    private void jTextFieldPrefijoDelPDFCdaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldPrefijoDelPDFCdaMouseClicked
        // TODO add your handling code here:
        jTextFieldPrefijoDelPDFCda.enable();
    }//GEN-LAST:event_jTextFieldPrefijoDelPDFCdaMouseClicked

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonProcesarCdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcesarCdaActionPerformed

        //        Thread hilo = new Thread() {
            //            public void run() {
                //                jProgressBar.setMaximum(30000);
                //                //JProgressBar jProgressBar = new JProgressBar(1, 100);
                //                for (int i = 0; i < 30000; i++) {
                    //                    System.out.println("numero: " + i);
                    //                    jProgressBar.setValue(i);
                    //                }
                //                jProgressBar.setValue(0);
                //            }
            //        };
        //        hilo.start();
        //
        //        JFrame frame = new JFrame("MessageDialog");
        //    JOptionPane pane = new JOptionPane();
        //    pane.setMessage("procesando...");
        //        JProgressBar jProgressBar = new JProgressBar(1, 100);
        //    jProgressBar.setValue(15);
        //    pane.add(jProgressBar,1);
        //    JDialog dialog = pane.createDialog(frame, "Info");
        //    dialog.setVisible(true);
        //    dialog.dispose();
        //

        if (jTextFieldPrefijoDelPDFCda.getText().equals("") || jTextFieldNuevoNombrePDF.getText().equals("")) {
            if (jTextFieldPrefijoDelPDFCda.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Favor ingrese el prefijo del PDF");
                jTextFieldPrefijoDelPDFCda.requestFocusInWindow();
            }else {
                if (jTextFieldNuevoNombrePDF.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Favor ingrese el nuevo nombre del PDF");
                    jTextFieldNuevoNombrePDF.requestFocusInWindow();
                }
            }
        } else {

            if (!existsNombrePDFCda()&& existsPDFInicialCda()) {

                String pdfInicial = jTextFieldPDFInicialCda.getText();
                String prefijoDelPdf = jTextFieldPrefijoDelPDFCda.getText();
                String nuevoNombrePdf = jTextFieldNuevoNombrePDF.getText().toUpperCase();
                String numeracionPdf = "";
                int numeracionPrimerDoc = 0;
                List<String> list = new ArrayList<String>();
                int posicion = 0;

                /**
                * Se le contatena la extensi√≥n del archivo (pdf)
                */
                if (!pdfInicial.equals("")) {
                    if (!pdfInicial.contains(".pdf")) {
                        pdfInicial = pdfInicial.concat(".pdf");
                    }
                    numeracionPdf = pdfInicial.substring(prefijoDelPdf.length(), pdfInicial.indexOf("."));
                    //                    if (!numeracionPdf.equals("")) {
                        //                        posicion = Integer.parseInt(numeracionPdf);
                        //                        numeracionPrimerDoc = posicion;
                        //                        list.add(pdfInicial);
                        //                    }
                    posicion = Integer.parseInt(numeracionPdf);
                    numeracionPrimerDoc = posicion;
                    list.add(pdfInicial);
                    jProgressBar.setValue(30);
                } else {
                    for (File archivo : fileCda.listFiles()) {
                        if (archivo.isFile()) {
                            String archivoPdf = archivo.getName();
                            numeracionPdf = archivoPdf.substring(prefijoDelPdf.length(), archivoPdf.indexOf("."));
                            posicion = Integer.parseInt(numeracionPdf);
                            if (numeracionPrimerDoc == 0) {
                                numeracionPrimerDoc = posicion;
                                pdfInicial = prefijoDelPdf + numeracionPrimerDoc + ".pdf";
                            }
                            if (posicion < numeracionPrimerDoc) {
                                numeracionPrimerDoc = posicion;
                                pdfInicial = prefijoDelPdf + numeracionPrimerDoc + ".pdf";
                            }
                        }
                    }
                    list.add(pdfInicial);
                }
                /**
                * obtiene la numeraci√≥n de archivos
                */
                try {
                    jSpinnerInicioNum.commitEdit();
                } catch (ParseException ex) {
                    Logger.getLogger(InicioJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

                int inicioNum = (Integer) jSpinnerInicioNum.getValue();

                /**
                * obtiene la cantidad de bonos
                */
                try {
                    jSpinnerCantidad.commitEdit();
                } catch (ParseException ex) {
                    Logger.getLogger(InicioJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                int cantidad = (Integer) jSpinnerCantidad.getValue();

                for (int i = numeracionPrimerDoc + 1; i < cantidad + (numeracionPrimerDoc + 1); i++) {
                    if (i < 10) {
                        list.add(prefijoDelPdf + "00" + i + ".pdf");
                    }
                    if (i >= 10 && i < 100) {
                        list.add(prefijoDelPdf + "0" + i + ".pdf");
                    }
                    if (i >= 100) {
                        list.add(prefijoDelPdf + i + ".pdf");
                    }
                }

                String carpetaContenedora = fileCda.getAbsolutePath();
                /**
                * crea la carpeta 'Procesados' donde se almacenan los pdf's
                * originales
                */
                File folderProcesados = new File(carpetaContenedora + "\\Procesados");
                if (!folderProcesados.exists()) {
                    folderProcesados.mkdir();
                }
                /**
                * crea una subcarpeta nombrada con la fecha actual
                */
                Calendar fechaActual = Calendar.getInstance();
                StringBuilder fecha = new StringBuilder();
                fecha.append(fechaActual.get(Calendar.DAY_OF_MONTH) < 10 ? "0" + (fechaActual.get(Calendar.DAY_OF_MONTH)) : (fechaActual.get(Calendar.DAY_OF_MONTH)));
                fecha.append(fechaActual.get(Calendar.MONTH) < 9 ? "0" + (fechaActual.get(Calendar.MONTH) + 1) : (fechaActual.get(Calendar.MONTH) + 1));
                fecha.append(fechaActual.get(Calendar.YEAR));
                File folderFecha = new File(folderProcesados.getAbsolutePath() + "\\" + fecha.toString());
                    if (!folderFecha.exists()) {
                        folderFecha.mkdir();
                    }
                    /**
                    * crea la carpeta con nombre de la hora actual
                    */
                    fecha = new StringBuilder();
                    fecha.append(fechaActual.get(Calendar.HOUR_OF_DAY) < 10 ? "0" + (fechaActual.get(Calendar.HOUR_OF_DAY)) : fechaActual.get(Calendar.HOUR_OF_DAY));
                    fecha.append(fechaActual.get(Calendar.MINUTE) < 10 ? "0" + (fechaActual.get(Calendar.MINUTE)) : fechaActual.get(Calendar.MINUTE));
                    fecha.append(fechaActual.get(Calendar.SECOND) < 10 ? "0" + (fechaActual.get(Calendar.SECOND)) : fechaActual.get(Calendar.SECOND));
                    File folderHora = new File(folderFecha.getAbsolutePath() + "\\" + fecha.toString());
                        if (!folderHora.exists()) {
                            folderHora.mkdir();
                        }
                        /**
                        * crea la carpeta donde se almacenan los pdf's renombrados
                        */
                        File folder = new File(carpetaContenedora + "\\" + nuevoNombrePdf);
                            if (!folder.exists()) {
                                folder.mkdir();
                            }

                            for (String archivoPdf : list) {

                                if (existsFileCda(archivoPdf)) {

                                    Path source = Paths.get(carpetaContenedora + "\\" + archivoPdf);
                                        Path target = Paths.get(folderHora.getAbsolutePath()); // destino
                                        /**
                                        * copia a la carpeta procesados el pdf
                                        */
                                        try {
                                            Files.copy(source, target.resolve(source.getFileName()), StandardCopyOption.REPLACE_EXISTING);
                                        } catch (IOException ex) {
                                            Logger.getLogger(InicioJFrame.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        /**
                                        * renombra el archivo original con el valor del campo de
                                        * texto 'nuevo nombre pdf'
                                        */

                                        String concatNumeracionPrimerDoc = "";
                                        if (numeracionPrimerDoc < 10) {
                                            concatNumeracionPrimerDoc = "00" + numeracionPrimerDoc;
                                        }
                                        if (numeracionPrimerDoc >= 10 && numeracionPrimerDoc < 100) {
                                            concatNumeracionPrimerDoc = "0" + numeracionPrimerDoc;
                                        }
                                        if (numeracionPrimerDoc >= 100) {
                                            concatNumeracionPrimerDoc = String.valueOf(numeracionPrimerDoc);
                                        }

                                        if (archivoPdf.substring(prefijoDelPdf.length(), archivoPdf.indexOf(".")).equals(String.valueOf(concatNumeracionPrimerDoc))) {
                                            File archivo = new File(carpetaContenedora + "\\" + archivoPdf);
                                                File archivoRenombrado = new File(carpetaContenedora + "\\" + nuevoNombrePdf + ".pdf");
                                                    archivo.renameTo(archivoRenombrado.getAbsoluteFile());
                                                    source = Paths.get(archivoRenombrado.getAbsolutePath()); // origen de los archivos a procesar
                                                    target = Paths.get(folder.getAbsolutePath()); // destino
                                                } else {
                                                    File archivo = new File(carpetaContenedora + "\\" + archivoPdf);
                                                        File archivoRenombrado = new File(carpetaContenedora + "\\" + nuevoNombrePdf + "-" + inicioNum + ".pdf");
                                                            archivo.renameTo(archivoRenombrado.getAbsoluteFile());
                                                            inicioNum += 1;
                                                            source = Paths.get(archivoRenombrado.getAbsolutePath()); // origen de los archivos a procesar
                                                            target = Paths.get(folder.getAbsolutePath()); // destino
                                                        }
                                                        jProgressBar.setValue(90);
                                                        /**
                                                        * se mueven el archivo principal renombrado
                                                        */
                                                        try {
                                                            Files.move(source, target.resolve(source.getFileName()), StandardCopyOption.REPLACE_EXISTING);
                                                        } catch (IOException ex) {
                                                            Logger.getLogger(InicioJFrame.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        jProgressBar.setValue(100);
                                                    }
                                                }
                                                JOptionPane.showMessageDialog(null, "Procesado correctamente", "RenamePDF", JOptionPane.INFORMATION_MESSAGE);
                                            }

                                        }
    }//GEN-LAST:event_jButtonProcesarCdaActionPerformed

    private void jSpinnerFinNumAccKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSpinnerFinNumAccKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerFinNumAccKeyPressed

    private void jButtonExaminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExaminar1ActionPerformed
        // TODO add your handling code here:
        JFileChooser select = new JFileChooser();
        select.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        select.setCurrentDirectory(new File(prefsAcc.get("carpetaContenedora", ".")));
        int response = select.showOpenDialog(this);
        if (response == JFileChooser.APPROVE_OPTION) {
            fileAcc = select.getSelectedFile();
            jTextFieldCarpetaContenedoraAcc.setText(fileAcc.getAbsolutePath());
            prefsAcc.put("carpetaContenedora", fileAcc.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonExaminar1ActionPerformed

    private void jSpinnerInicioNumAccKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSpinnerInicioNumAccKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerInicioNumAccKeyPressed

    private void jTextFieldPDFInicialAccKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPDFInicialAccKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPDFInicialAccKeyPressed

    private void jTextFieldPDFInicialAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPDFInicialAccActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPDFInicialAccActionPerformed

    private void jTextFieldPDFInicialAccMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldPDFInicialAccMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPDFInicialAccMouseClicked

    private void jButtonSalir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalir1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButtonSalir1ActionPerformed

    private void jButtonProcesarAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcesarAccActionPerformed
        // TODO add your handling code here:
        if (jTextFieldPrefijoDelPDFAcc.getText().equals("")) {
            if (jTextFieldPrefijoDelPDFAcc.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Favor ingrese el prefijo del PDF");
                jTextFieldPrefijoDelPDFAcc.requestFocusInWindow();
            }
        } else {

            if (existsPDFInicialAcc()) {

                String pdfInicial = jTextFieldPDFInicialAcc.getText();
                String prefijoDelPdf = jTextFieldPrefijoDelPDFAcc.getText();
                String numeracionPdf = "";
                int numeracionPrimerDoc = 0;
                List<String> list = new ArrayList<String>();
                int posicion = 0;
                /**
                * Se le contatena la extensi√≥n del archivo (pdf)
                */
                if (!pdfInicial.equals("")) {
                    if (!pdfInicial.contains(".pdf")) {
                        pdfInicial = pdfInicial.concat(".pdf");
                    }
                    numeracionPdf = pdfInicial.substring(prefijoDelPdf.length(), pdfInicial.indexOf("."));
                    //                    if (!numeracionPdf.equals("")) {
                        //                        posicion = Integer.parseInt(numeracionPdf);
                        //                        numeracionPrimerDoc = posicion;
                        //                        list.add(pdfInicial);
                        //                    }
                    posicion = Integer.parseInt(numeracionPdf);
                    numeracionPrimerDoc = posicion;
                    //list.add(pdfInicial);
                    jProgressBar.setValue(30);
                } else {
                    for (File archivo : fileAcc.listFiles()) {
                        if (archivo.isFile()) {
                            String archivoPdf = archivo.getName();
                            numeracionPdf = archivoPdf.substring(prefijoDelPdf.length(), archivoPdf.indexOf("."));
                            posicion = Integer.parseInt(numeracionPdf);
                            if (numeracionPrimerDoc == 0) {
                                numeracionPrimerDoc = posicion;
                                pdfInicial = prefijoDelPdf + numeracionPrimerDoc + ".pdf";
                            }
                            if (posicion < numeracionPrimerDoc) {
                                numeracionPrimerDoc = posicion;
                                pdfInicial = prefijoDelPdf + numeracionPrimerDoc + ".pdf";
                            }
                        }
                    }
                    //list.add(pdfInicial);
                }
                /**
                * obtiene la numeraci√≥n de archivos
                */
                try {
                    jSpinnerInicioNumAcc.commitEdit();
                    jSpinnerFinNumAcc.commitEdit();
                } catch (ParseException ex) {
                    Logger.getLogger(InicioJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

                int inicioNum = (Integer) jSpinnerInicioNumAcc.getValue();
                int finNum = (Integer) jSpinnerFinNumAcc.getValue();
                
                int cantidad = (finNum - inicioNum) + 1;

                //numeracionPrimerDoc = inicioNum;
                
                for (int i = 0; i < cantidad; i++) {
                    
                    
                    
                    if (numeracionPrimerDoc < 10) {
                        list.add(prefijoDelPdf + "00" + numeracionPrimerDoc + ".pdf");
                    }
                    if (numeracionPrimerDoc >= 10 && i < numeracionPrimerDoc) {
                        list.add(prefijoDelPdf + "0" + numeracionPrimerDoc + ".pdf");
                    }
                    if (numeracionPrimerDoc >= 100) {
                        list.add(prefijoDelPdf + numeracionPrimerDoc + ".pdf");
                    }
                    numeracionPrimerDoc += 1;
                }

                String carpetaContenedora = fileAcc.getAbsolutePath();
                /**
                * crea la carpeta 'Procesados' donde se almacenan los pdf's
                * originales
                */
                File folderProcesados = new File(carpetaContenedora + "\\Procesados");
                if (!folderProcesados.exists()) {
                    folderProcesados.mkdir();
                }
                /**
                * crea una subcarpeta nombrada con la fecha actual
                */
                Calendar fechaActual = Calendar.getInstance();
                StringBuilder fecha = new StringBuilder();
                fecha.append(fechaActual.get(Calendar.DAY_OF_MONTH) < 10 ? "0" + (fechaActual.get(Calendar.DAY_OF_MONTH)) : (fechaActual.get(Calendar.DAY_OF_MONTH)));
                fecha.append(fechaActual.get(Calendar.MONTH) < 9 ? "0" + (fechaActual.get(Calendar.MONTH) + 1) : (fechaActual.get(Calendar.MONTH) + 1));
                fecha.append(fechaActual.get(Calendar.YEAR));
                File folderFecha = new File(folderProcesados.getAbsolutePath() + "\\" + fecha.toString());
                if (!folderFecha.exists()) {
                    folderFecha.mkdir();
                }
                /**
                * crea la carpeta con nombre de la hora actual
                */
                fecha = new StringBuilder();
                fecha.append(fechaActual.get(Calendar.HOUR_OF_DAY) < 10 ? "0" + (fechaActual.get(Calendar.HOUR_OF_DAY)) : fechaActual.get(Calendar.HOUR_OF_DAY));
                fecha.append(fechaActual.get(Calendar.MINUTE) < 10 ? "0" + (fechaActual.get(Calendar.MINUTE)) : fechaActual.get(Calendar.MINUTE));
                fecha.append(fechaActual.get(Calendar.SECOND) < 10 ? "0" + (fechaActual.get(Calendar.SECOND)) : fechaActual.get(Calendar.SECOND));
                File folderHora = new File(folderFecha.getAbsolutePath() + "\\" + fecha.toString());
                if (!folderHora.exists()) {
                    folderHora.mkdir();
                }
                for (String archivoPdf : list) {

                    if (existsFileAcc(archivoPdf)) {

                        Path source = Paths.get(carpetaContenedora + "\\" + archivoPdf);
                        Path target = Paths.get(folderHora.getAbsolutePath()); // destino
                        /**
                        * copia a la carpeta procesados el pdf
                        */
                        try {
                            Files.copy(source, target.resolve(source.getFileName()), StandardCopyOption.REPLACE_EXISTING);
                        } catch (IOException ex) {
                            Logger.getLogger(InicioJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        String nombreAcc = String.valueOf(inicioNum);

                        File archivo = new File(carpetaContenedora + "\\" + archivoPdf);

                        File archivoRenombrado = new File(carpetaContenedora + "\\" + nombreAcc + ".pdf");
                        archivo.renameTo(archivoRenombrado.getAbsoluteFile());
                        inicioNum += 1;
                        source = Paths.get(archivoRenombrado.getAbsolutePath()); // origen de los archivos a procesar
                        target = Paths.get(folderProcesados.getAbsolutePath()); // destino
                        jProgressBar.setValue(90);
                        /**
                        * se mueven el archivo principal renombrado
                        */
                        try {
                            Files.move(source, target.resolve(source.getFileName()), StandardCopyOption.REPLACE_EXISTING);
                        } catch (IOException ex) {
                            Logger.getLogger(InicioJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        jProgressBar.setValue(100);
                    }
                }
                JOptionPane.showMessageDialog(null, "Procesado correctamente", "RenamePDF", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonProcesarAccActionPerformed

    private void jTextFieldPrefijoDelPDFAccKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPrefijoDelPDFAccKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPrefijoDelPDFAccKeyPressed

    private void jTextFieldPrefijoDelPDFAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPrefijoDelPDFAccActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPrefijoDelPDFAccActionPerformed

    private void jTextFieldPrefijoDelPDFAccMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldPrefijoDelPDFAccMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPrefijoDelPDFAccMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    
    
    private boolean existsNombrePDFCda() {
        boolean resp = false;
        for (File carpeta : fileCda.listFiles()) {
            if (carpeta.isDirectory()) {
                if (carpeta.getName().equalsIgnoreCase(jTextFieldNuevoNombrePDF.getText())) {
                    JOptionPane.showMessageDialog(null, "Ya existe el archivo " + carpeta.getName());
                    jTextFieldNuevoNombrePDF.setText("");
                    jTextFieldNuevoNombrePDF.requestFocusInWindow();
                    resp = true;
                }
            }
        }
        return resp;
    }
        
    private boolean existsPDFInicialCda() {
        boolean resp = false;
        for (File archivo : fileCda.listFiles()) {
            if (archivo.isFile()) {
                if (!jTextFieldPDFInicialCda.getText().contains(".pdf")) {
                    jTextFieldPDFInicialCda.setText(jTextFieldPDFInicialCda.getText() + ".pdf");
                }
                if (archivo.getName().equals(jTextFieldPDFInicialCda.getText())) {
                    return true;
                }
            }
        }
        JOptionPane.showMessageDialog(null, "No existe el archivo " + jTextFieldPDFInicialCda.getText() + " indicado como PDF Inicial");
         jTextFieldPDFInicialCda.setText("");
         jTextFieldPDFInicialCda.requestFocusInWindow();
        return resp;
    }
            
    private boolean existsFileCda(String archivoPdf) {
        for (File archivo : fileCda.listFiles()) {
            if (archivo.isFile()) {
                if (!archivoPdf.contains(".pdf")) {
                    archivoPdf = archivoPdf + ".pdf";
                }
                if (archivo.getName().equals(archivoPdf)) {
                    return true;
                }
            }
        }
        return false;
    }
    
        private boolean existsNombrePDFAcc() {
        boolean resp = false;
        for (File carpeta : fileAcc.listFiles()) {
            if (carpeta.isDirectory()) {
                if (carpeta.getName().equalsIgnoreCase(jTextFieldNuevoNombrePDF.getText())) {
                    JOptionPane.showMessageDialog(null, "Ya existe el archivo " + carpeta.getName());
                    jTextFieldNuevoNombrePDF.setText("");
                    jTextFieldNuevoNombrePDF.requestFocusInWindow();
                    resp = true;
                }
            }
        }
        return resp;
    }
        
    private boolean existsPDFInicialAcc() {
        boolean resp = false;
        for (File archivo : fileAcc.listFiles()) {
            if (archivo.isFile()) {
                if (!jTextFieldPDFInicialAcc.getText().contains(".pdf")) {
                    jTextFieldPDFInicialAcc.setText(jTextFieldPDFInicialAcc.getText() + ".pdf");
                }
                if (archivo.getName().equals(jTextFieldPDFInicialAcc.getText())) {
                    return true;
                }
            }
        }
        JOptionPane.showMessageDialog(null, "No existe el archivo " + jTextFieldPDFInicialAcc.getText() + " indicado como PDF Inicial");
         jTextFieldPDFInicialAcc.setText("");
         jTextFieldPDFInicialAcc.requestFocusInWindow();
        return resp;
    }
            
    private boolean existsFileAcc(String archivoPdf) {
        for (File archivo : fileAcc.listFiles()) {
            if (archivo.isFile()) {
                if (!archivoPdf.contains(".pdf")) {
                    archivoPdf = archivoPdf + ".pdf";
                }
                if (archivo.getName().equals(archivoPdf)) {
                    return true;
                }
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExaminar;
    private javax.swing.JButton jButtonExaminar1;
    private javax.swing.JButton jButtonProcesarAcc;
    private javax.swing.JButton jButtonProcesarCda;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JButton jButtonSalir1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelLogoCavapyAcc;
    private javax.swing.JLabel jLabelLogoCavapyCda;
    private javax.swing.JLabel jLabelPrefijoDelPDF;
    private javax.swing.JLabel jLabelPrefijoDelPDF1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner jSpinnerCantidad;
    private javax.swing.JSpinner jSpinnerFinNumAcc;
    private javax.swing.JSpinner jSpinnerInicioNum;
    private javax.swing.JSpinner jSpinnerInicioNumAcc;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextFieldCarpetaContenedoraAcc;
    private javax.swing.JTextField jTextFieldCarpetaContenedoraCda;
    private javax.swing.JTextField jTextFieldNuevoNombrePDF;
    private javax.swing.JTextField jTextFieldPDFInicialAcc;
    private javax.swing.JTextField jTextFieldPDFInicialCda;
    private javax.swing.JTextField jTextFieldPrefijoDelPDFAcc;
    private javax.swing.JTextField jTextFieldPrefijoDelPDFCda;
    // End of variables declaration//GEN-END:variables
}
